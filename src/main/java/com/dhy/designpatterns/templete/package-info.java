/**
 * @Title package-info
 * @Description
 *
 * 模板方法是一种行为设计模式，
 * 　它在超类中定义了一个算法的　
 * 　框架，允许子类在不修改结构　
 * 　的情况下重写算法的特定步骤。
 *
 * 1. 抽象类（AbstractClass） 会声明作为算法步骤的方法， 以
 * 及依次调用它们的实际模板方法。 算法步骤可以被声明为
 * 抽象 类型，也可以提供一些默认实现。
 *
 * 2. 具体类（ConcreteClass）可以重写所有步骤，但不能重写模
 * 板方法自身。
 *
 *
 * 适合应用场景
 * 当你只希望客户端扩展某个特定算法步骤，而不是整个算法
 * 或其结构时，可使用模板方法模式。
 *
 * 模板方法将整个算法转换为一系列独立的步骤，以便子类能
 * 对其进行扩展，同时还可让超类中所定义的结构保持完整。
 *
 * 当多个类的算法除一些细微不同之外几乎完全一样时，你可
 * 使用该模式。
 * 但其后果就是，只要算法发生变化，你就可能
 * 需要修改所有的类。
 *
 * 在将算法转换为模板方法时，你可将相似的实现步骤提取到
 * 超类中以去除重复代码。子类间各不同的代码可继续保留在
 * 子类中。
 *
 * @Author lvaolin
 * @Date 2022/1/28 18:29
 **/
package com.dhy.designpatterns.templete;