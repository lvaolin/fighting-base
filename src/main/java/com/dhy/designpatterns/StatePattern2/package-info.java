/**
 * @Title package-info
 * @Description
 *
 * 状态模式：
 *
 * 状态是一种行为设计模式，
 * 　让你能在一个对象的内部　
 * 　状态变化时改变其行为，　
 * 　使其看上去就像改变了自　
 * 　身所属的类一样。
 *
 * 每一种状态都是一个实现了状态接口的对象。
 * 状态变化的本质就是不断变更上下文对当前状态对象的引用，从而达到变更状态的目的。
 *
 *
 * 1. 上下文（Context）保存了对于一个具体状态对象的引用，并
 * 会将所有与该状态相关的工作委派给它。上下文通过状态接
 * 口与状态对象交互，且会提供一个设置器用于传递新的状态
 * 对象。
 *
 * 2. 状态（State）接口会声明特定于状态的方法。这些方法应能
 * 被其他所有具体状态所理解，因为你不希望某些状态所拥有
 * 的方法永远不会被调用。
 *
 * 3. 具体状态（Concrete States）会自行实现特定于状态的方法。
 * 为了避免多个状态中包含相似代码，你可以提供一个封装有
 * 部分通用行为的中间抽象类。
 * 状态对象可存储对于上下文对象的反向引用。状态可以通过
 * 该引用从上下文处获取所需信息，并且能触发状态转移。
 *
 * 4. 上下文和具体状态都可以设置上下文的下个状态，并可通过
 * 替换连接到上下文的状态对象来完成实际的状态转换。
 *
 *
 * @Author lvaolin
 * @Date 2022/1/28 17:47
 **/
package com.dhy.designpatterns.StatePattern2;